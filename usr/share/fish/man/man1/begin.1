.TH "begin" 1 "Sun Nov 26 2017" "Version 2.7.0" "fish" \" -*- nroff -*-
.ad l
.nh
.SH NAME
beginbegin - start a new block of code 
 \- 
.PP
.SS "Synopsis"
.PP
.nf

\fBbegin\fP; [COMMANDS\&.\&.\&.;] \fBend\fP
.fi
.PP
.SS "Description"
\fCbegin\fP is used to create a new block of code\&.
.PP
The block is unconditionally executed\&. \fCbegin; \&.\&.\&.; end\fP is equivalent to \fCif true; \&.\&.\&.; end\fP\&.
.PP
\fCbegin\fP is used to group a number of commands into a block\&. This allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like \fCand\fP\&.
.PP
\fCbegin\fP does not change the current exit status itself\&. After the block has completed, \fC$status\fP will be set to the status returned by the most recent command\&.
.SS "Example"
The following code sets a number of variables inside of a block scope\&. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends\&.
.PP
.PP
.nf

\fBbegin\fP
    \fBset\fP -l PIRATE Yarrr
    \&.\&.\&.
\fBend\fP
.fi
.PP
.PP
.PP
.nf
\fBecho\fP $PIRATE
  This will not output anything, since the PIRATE variable
  went out of scope at the end of the block
.fi
.PP
.PP
In the following code, all output is redirected to the file out\&.html\&.
.PP
.PP
.nf

\fBbegin\fP
    \fBecho\fP $xml_header
    \fBecho\fP $html_header
    \fBif\fP \fBtest\fP -e $file
        \&.\&.\&.
    \fBend\fP
    \&.\&.\&.
\fBend\fP > out\&.html
.fi
.PP
 
